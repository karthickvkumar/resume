Modules:
	-> modules are use to seperate the application logic (controller, service, etc)
angular.module: 
	-> Its a global place for creating, registering and retrieving angular js modules
Configuration Block:
	-> Get executed during the provider registration and config phase
	-> only provider and constant can be injected
	-> To prevent accidental installation of services befor configured.
Run Block:
	-> Get executed after the injector is created
	-> used to kickstart the appliction
	-> only instant and constant can be injected
ng-bind: 
	-> one way data binding ($scope -> view)
	-> It display the scope value inserted into the html
ng-modal:
	-> Two way data binding ($scope-> view and view -> $scope)
$timeout(callback):
	-> It will wait until the current digest cycle is done and then execute the callback, then run $apply.
$timeout(callback, delay, false):
	-> It will also wait, but execute callback with delay.
	-> But it does not fire $apply(), Thus save performace but didn't modify $scope.
$scope.$apply(callback):
	-> It will re-digest the root scope of the application and all of its children, even if its in isolated scope(mostly directive).
$scope.$digest():
	-> It will sync its model to the view.
	-> But it will not digest its parent scope, which can save performance
	-> Does not take any callback
$evalAsync(callback):
	-> It will add callback to the current or next digest cycle.
$digest():
	-> It process all the watches of the current scope and its children. 
	-> usually we don't call $digest, instead we should call $apply(), which force a $digest()

Digest Loop:
 	-> Every model binding in UI is given the $watch is added to the $watch list.
 	-> The list of $watch function are resolved during the $digest loop via dirty checking
 	-> $digest loop is triggered by $apply()
Dirty checking:
	-> The $watch, list and compares the oldValue and newValue
	-> If no changes to specific binding watched, it moves to the next item in $watch list

  Borwser:             Javascript:

[Event Queue] --> $apply(fun) --> fun() 
	 || 			|
[DOM Render]		  $evalAsync queue
		            ($digest loop)
	<-------------------- $watch List

Recap of $watch(), $digest(), $apply()
	-> Angular $scope has some central function like $watch(), $digest(), $apply()
Data Binding:
	-> when we create a data binding in view ($scope variable)
	-> It create a $watch internally.
	-> $watch, watches the variable, it is created using $scope.$watch()
	-> The $scope.$digest() function iterate through all the watches and check if any watched variables have changed.
	-> If a watched variables is changed it calls a listner function.
	-> Thus $digest() is what triggered the data binding to update.
	-> In some situation we may call this by ourself, using $scope.$apply()
$watch():
	-> It create watch for some variable
	-> It accept two argument 'A value function and A listner function'
$digest():
	-> It iterate through all the watches in the $scope object and its child $scope objects.
	-> If the value return by the value function and the its last value was same then it will call the listener function.
	-> It will calls when a button click handler has been executed or after the ajax call return.
$apply():
	-> The $scope.$apply() function takes a function as paramater which is executed after the $scope.$digest() is called internally.
